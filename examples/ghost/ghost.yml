---
- name: run ghost blogging platform deployed as containers
  hosts: localhost
  vars:
    wipe: false
    c_state: '{{ "absent" if wipe | bool else "started" }}'
    i_state: '{{ "absent" if wipe | bool else "present" }}'
    c_name: my-ghost
    nginx_container: '{{ c_name }}-nginx'
    db_container: '{{ c_name }}-db'
    db_database_name: ghost
    db_user: ghost
    db_password: casper
  tasks:
    - name: build ghost image
      docker_image:
        path: ghost
        name: '{{ c_name }}'
        tag: latest
        state: '{{ i_state }}'
        force: true

    - name: overlay custom configuration on top of nginx image
      docker_image:
        path: nginx
        name: '{{ nginx_container }}'
        tag: latest
        state: '{{ i_state }}'
        force: true

    - name: create ghost docker network
      docker_network:
        name: '{{ c_name }}'
        state: present

    - name: run mariadb
      docker_container:
        name: '{{ db_container }}'
        image: mariadb:10.3
        pull: true
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: '{{ c_name }}'
        env:
          MYSQL_ROOT_PASSWORD: root-password
          MYSQL_DATABASE: '{{ db_database_name }}'
          MYSQL_USER: '{{ db_user }}'
          MYSQL_PASSWORD: '{{ db_password }}'
        volumes:
          - '{{ db_container }}-data:/var/lib/mysql:z'

    - meta: refresh_inventory

    - name: wait for mariadb to become ready
      wait_for:
        host: '{{ hostvars[db_container]["docker_networksettings"]["Networks"][c_name]["IPAddress"] }}'
        port: 3306
        state: started
        connect_timeout: 15
        timeout: 30
      register: mariadb_running
      until: mariadb_running is succeeded
      retries: 10
      delay: 5
      when: not wipe | bool

    - name: run ghost web service
      docker_container:
        name: '{{ c_name }}'
        image: '{{ c_name }}'
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: '{{ c_name }}'
        env:
          DB_CONTAINER: '{{ db_container }}'
          DB_USER: '{{ db_user }}'
          DB_PASSWORD: '{{ db_password }}'
          DB_DATABASE: '{{ db_database_name }}'

    - name: run nginx proxy
      docker_container:
        name: '{{ nginx_container }}'
        image: '{{ nginx_container }}'
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: '{{ c_name }}'
        published_ports:
          - '8080:80'
        env:
          GHOST_CONTAINER: '{{ c_name }}'
          GHOST_PORT: 2368

    - name: test if ghost is running
      uri:
        url: "http://localhost:8080/"
        method: GET
        status_code: 200
      register: ghost_running
      until: ghost_running is succeeded
      retries: 10
      delay: 10
      when: not wipe | bool

    - name: remove docker volumes
      command: docker volume rm {{ db_container }}-data
      ignore_errors: true
      when: wipe | bool

    - name: remove network
      docker_network:
        name: '{{ c_name }}'
        state: absent
      ignore_errors: true
      when: wipe | bool
