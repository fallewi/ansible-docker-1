---
- name: run ghost blogging platform deployed as containers
  hosts: localhost
  vars:
    wipe: false
    c_state: '{{ "absent" if wipe == "true" else "started" }}'
    db_container: mariadb-container
    db_database_name: ghost-db
    db_user: ghost-user
    db_password: casper
    ghost_container: ghost-container
    ghost_port: 2368
    nginx_container: nginx-container
  tasks:
    - name: create ghost docker network
      docker_network:
        name: ghost-network
        state: present

    - name: run mariadb
      docker_container:
        name: '{{ db_container }}'
        image: mariadb:10.1
        pull: true
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: ghost-network
        env:
          MYSQL_ROOT_PASSWORD: root-password
          MYSQL_DATABASE: '{{ db_database_name }}'
          MYSQL_USER: '{{ db_user }}'
          MYSQL_PASSWORD: '{{ db_password }}'
        volumes:
          - mariadb-data:/var/lib/mysql:z

    - name: get mariadb IP address
      command: "docker inspect --format {% raw %}'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'{% endraw %} {{ db_container }}"
      register: mariadb_ip_address
      when: not wipe

    - name: wait for mariadb to become ready
      wait_for:
        host: '{{ mariadb_ip_address.stdout }}'
        port: 3306
        state: started
        connect_timeout: 15
        timeout: 30
      register: mariadb_running
      until: mariadb_running | success
      retries: 10
      delay: 5
      when: not wipe

    - name: run ghost web service
      docker_container:
        name: '{{ ghost_container }}'
        image: my-ghost
        state: '{{ c_state }}'
        recreate: true
        restart_policy: always
        purge_networks: true
        networks:
          - name: ghost-network
        env:
          DB_CONTAINER: '{{ db_container }}'
          DB_USER: '{{ db_user }}'
          DB_PASSWORD: '{{ db_password }}'
          DB_DATABASE: '{{ db_database_name }}'

    - name: run nginx proxy
      docker_container:
        name: '{{ nginx_container }}'
        image: my-nginx-ghost
        state: '{{ c_state }}'
        recreate: true
        restart_policy: always
        purge_networks: true
        networks:
          - name: ghost-network
        ports:
          - '8080:80'
        env:
          GHOST_PORT: '{{ ghost_port }}'
          GHOST_CONTAINER: '{{ ghost_container }}'

    - name: get nginx IP address
      command: "docker inspect --format {% raw %}'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'{% endraw %} {{ nginx_container }}"
      register: nginx_ip_address
      when: not wipe

    - name: test if ghost is running
      uri:
        url: "http://{{ nginx_ip_address.stdout }}/"
        method: GET
        status_code: 200
      register: ghost_running
      until: ghost_running | success
      retries: 10
      delay: 10
      when: not wipe

    - name: remove docker volumes
      command: docker volume rm mariadb-data
      ignore_errors: true
      when: wipe

    - name: remove network
      docker_network:
        name: ghost-network
        state: absent
      ignore_errors: true
      when: wipe
