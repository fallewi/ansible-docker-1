---
- name: create mongodb container for rocketchat
  hosts: localhost
  vars:
    wipe: false
    c_state: '{{ "absent" if wipe | bool else "started" }}'
    c_name: my-rocketchat
  tasks:
    - name: create network for rocketchat
      docker_network:
        name: '{{ c_name }}'
        state: present

    - name: create mongodb for rocketchat container
      docker_container:
        name: '{{ c_name }}-mongo'
        image: pschiffe/mongo-ansible
        pull: true
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: '{{ c_name }}'
            aliases:
              - db
              - mongo
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - '{{ c_name }}-db-data:/data/db:z'
          - '{{ c_name }}-db-config-data:/data/configdb:z'
        command: --auth --smallfiles

    - meta: refresh_inventory

- name: create db users in mongodb container
  hosts: '{{ c_name }}-mongo'
  connection: docker
  vars:
    c_name: my-rocketchat
    mongo_admin: admin
    rocket_user: rocket
  vars_files:
    - passwords.yml
  tasks:
    - name: create admin user
      shell: "echo \"db.createUser({ user: '{{ mongo_admin }}', pwd: '{{ mongo_admin_pass }}', roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ] });\" | mongo admin"

    - name: create rocket user
      mongodb_user:
        login_user: '{{ mongo_admin }}'
        login_password: '{{ mongo_admin_pass }}'
        database: '{{ rocket_user }}'
        name: '{{ rocket_user }}'
        password: '{{ rocket_password }}'
        roles:
          - db: '{{ rocket_user }}'
            role: readWrite
        state: present

- name: create rocketchat container
  hosts: localhost
  vars:
    wipe: false
    c_state: '{{ "absent" if wipe | bool else "started" }}'
    c_name: my-rocketchat
    rocket_user: rocket
  vars_files:
    - passwords.yml
  tasks:
    - name: create rocketchat container
      docker_container:
        name: '{{ c_name }}'
        image: rocket.chat
        pull: true
        state: '{{ c_state }}'
        restart_policy: always
        purge_networks: true
        networks:
          - name: '{{ c_name }}'
        published_ports:
          - '3001:3000'
        env:
          MONGO_URL: 'mongodb://{{ rocket_user }}:{{ rocket_password }}@db:27017/{{ rocket_user }}'
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - '{{ c_name }}-data:/app/uploads:z'

    - name: remove docker volumes
      command: docker volume rm {{ c_name }}-data {{ c_name }}-db-data {{ c_name }}-db-config-data
      ignore_errors: true
      when: wipe | bool

    - name: remove network
      docker_network:
        name: '{{ c_name }}'
        state: absent
      ignore_errors: true
      when: wipe | bool
